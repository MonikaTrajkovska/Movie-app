{"version":3,"sources":["components/Nav.js","components/Search.js","components/Movie.js","components/MovieList.js","components/Pagination.js","components/MovieInfo.js","components/App.js","serviceWorker.js","index.js"],"names":["Nav","react_default","a","createElement","className","href","Search","props","action","onSubmit","handleSubmit","placeholder","type","onChange","handleChange","Movie","image","src","alt","style","width","height","concat","onClick","viewMovieInfo","movieId","MovieList","movies","map","movie","i","components_Movie","key","id","poster_path","Pagination","pageLinks","_loop","active","currentPage","push","nextPage","pages","MovieInfo","closeMovieInfo","cursor","paddingTop","marginLeft","currentMovie","title","release_date","substring","split","join","overview","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","preventDefault","fetch","apiKey","state","searchTerm","then","data","json","console","log","setState","toConsumableArray","results","totalResults","total_results","target","value","pageNumber","filteredMovie","filter","newCurrentMovie","length","process","numberPages","Math","floor","components_Nav","components_Search","components_MovieList","components_MovieInfo","components_Pagination","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2MAYeA,EATL,WACN,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACZH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,IAAID,UAAU,cAAtB,mBCYAE,EAhBD,SAACC,GACX,OACIN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,WAASC,UAAU,oBACfH,EAAAC,EAAAC,cAAA,QAAMK,OAAO,GAAGC,SAAUF,EAAMG,cAC5BT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,SAAOQ,YAAY,eAAeC,KAAK,OAAOC,SAAUN,EAAMO,qBCS3EC,EAjBF,SAACR,GACZ,OACIN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mDACE,MAAfG,EAAMS,MAAgBf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,GAAGa,IAAG,0EAA6EC,IAAI,iBAAiBC,MAAO,CAAEC,MAAO,OACrJC,OAAQ,OAAUpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,GAAGa,IAAG,iCAAAK,OAAmCf,EAAMS,OAASE,IAAI,iBAAiBC,MAAO,CAAEC,MAAO,OAC9HC,OAAQ,QAGlBpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,IAAIkB,QAAS,kBAAIhB,EAAMiB,cAAcjB,EAAMkB,WAAnD,sBCUJC,EAnBC,SAACnB,GACb,OACIN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAEPG,EAAMoB,OAAOC,IAAI,SAACC,EAAMC,GACpB,OACI7B,EAAAC,EAAAC,cAAC4B,EAAD,CAAOC,IAAKF,EAAGN,cAAejB,EAAMiB,cAAeC,QAASI,EAAMI,GAAIjB,MAAOa,EAAMK,oBCYhGC,EAtBG,SAAC5B,GAEX,IADA,IAAM6B,EAAU,GADGC,EAAA,SAEXP,GACJ,IAAIQ,EAAO/B,EAAMgC,aAAeT,EAAI,SAAW,IAC/CM,EAAUI,KAAKvC,EAAAC,EAAAC,cAAA,MAAIC,UAAS,gBAAAkB,OAAkBgB,GAAUN,IAAKF,EAAGP,QAAS,kBAAIhB,EAAMkC,SAASX,KAAI7B,EAAAC,EAAAC,cAAA,KAAGE,KAAK,KAAKyB,MAFzGA,EAAI,EAAGA,GAAGvB,EAAMmC,MAAO,EAAGZ,IAAMO,EAAhCP,GAIR,OACI7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACTG,EAAMgC,YAAc,EAAItC,EAAAC,EAAAC,cAAA,MAAIC,UAAS,eAAmBmB,QAAS,kBAAIhB,EAAMkC,SAASlC,EAAMgC,YAAa,KAAItC,EAAAC,EAAAC,cAAA,KAAGE,KAAK,KAAR,SAA4B,GACvI+B,EACA7B,EAAMgC,YAAchC,EAAMmC,MAAQ,EAAKzC,EAAAC,EAAAC,cAAA,MAAIC,UAAS,eAAmBmB,QAAS,kBAAIhB,EAAMkC,SAASlC,EAAMgC,YAAc,KAAItC,EAAAC,EAAAC,cAAA,KAAGE,KAAK,KAAR,SAA4B,OCejKsC,EA3BE,SAACpC,GAClB,OACIN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMmB,QAAShB,EAAMqC,eAAgBzB,MAAO,CAAC0B,OAAO,UAAWC,WAAW,KAC7F7C,EAAAC,EAAAC,cAAA,KAAGC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,QAAMgB,MAAO,CAAC4B,WAAW,KAAzB,YAEI9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACoB,MAAlCG,EAAMyC,aAAad,YAAsBjC,EAAAC,EAAAC,cAAA,OAAKc,IAAG,0EAA6EC,IAAI,aAAaC,MAAO,CAAEC,MAAO,OAChJC,OAAQ,OAAUpB,EAAAC,EAAAC,cAAA,OAAKc,IAAG,iCAAAK,OAAmCf,EAAMyC,aAAad,aAAehB,IAAI,aAAaC,MAAO,CAAEC,MAAO,OAChIC,OAAQ,QAGxBpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACvBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACnBH,EAAAC,EAAAC,cAAA,SAAII,EAAMyC,aAAaC,OACvBhD,EAAAC,EAAAC,cAAA,SAAII,EAAMyC,aAAaE,aAAaC,UAAU,GAAGC,MAAM,KAAK9B,OAAOf,EAAMyC,aAAaE,aAAaC,UAAU,EAAG,IAAIE,KAAK,MACzHpD,EAAAC,EAAAC,cAAA,SAAII,EAAMyC,aAAaM,eCiDRC,cA9DX,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACTC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAYJjD,aAAa,SAACqD,GACVA,EAAEC,iBACFC,MAAK,qDAAA3C,OAAsDkC,EAAKU,OAA3D,WAAA5C,OAA2EkC,EAAKW,MAAMC,aAC1FC,KAAK,SAAAC,GAAI,OAAEA,EAAKC,SAChBF,KAAK,SAAAC,GACFE,QAAQC,IAAIH,GACZd,EAAKkB,SAAS,CAAC/C,OAAO8B,OAAAkB,EAAA,EAAAlB,CAAIa,EAAKM,SAAUC,aAAaP,EAAKQ,mBAnBtDtB,EAsBb1C,aAAa,SAACiD,GACVP,EAAKkB,SAAS,CAACN,WAAWL,EAAEgB,OAAOC,SAvB1BxB,EAyBbf,SAAS,SAACwC,GACNhB,MAAK,qDAAA3C,OAAsDkC,EAAKU,OAA3D,WAAA5C,OAA2EkC,EAAKW,MAAMC,WAAtF,UAAA9C,OAAyG2D,IAC7GZ,KAAK,SAAAC,GAAI,OAAEA,EAAKC,SAChBF,KAAK,SAAAC,GACFE,QAAQC,IAAIH,GACZd,EAAKkB,SAAS,CAAC/C,OAAO8B,OAAAkB,EAAA,EAAAlB,CAAIa,EAAKM,SAAUrC,YAAY0C,OA9BhDzB,EAiCbhC,cAAc,SAACS,GACX,IAAMiD,EAAe1B,EAAKW,MAAMxC,OAAOwD,OAAO,SAAAtD,GAAK,OAAEA,EAAMI,IAAMA,IAE3DmD,EAAkBF,EAAcG,OAAS,EAAIH,EAAc,GAAK,KACtE1B,EAAKkB,SAAS,CAAC1B,aAAeoC,KArCrB5B,EAwCbZ,eAAe,WACXY,EAAKkB,SAAS,CAAC1B,aAAa,QAvC5BQ,EAAKW,MAAM,CACPxC,OAAO,GACPyC,WAAW,GACXS,aAAa,EACbtC,YAAY,EACZS,aAAa,MAGjBQ,EAAKU,OAAOoB,mCAVH9B,wEA8CT,IAAM+B,EAAYC,KAAKC,MAAM9B,KAAKQ,MAAMU,aAAe,IACvD,OACI5E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAE3BH,EAAAC,EAAAC,cAACuF,EAAD,MAE4B,MAA3B/B,KAAKQ,MAAMnB,aAAuB/C,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAACwF,EAAD,CAAQjF,aAAciD,KAAKjD,aAAcI,aAAc6C,KAAK7C,eAAeb,EAAAC,EAAAC,cAACyF,EAAD,CAAWpE,cAAemC,KAAKnC,cAAeG,OAAQgC,KAAKQ,MAAMxC,UAClL1B,EAAAC,EAAAC,cAAC0F,EAAD,CAAW7C,aAAcW,KAAKQ,MAAMnB,aAAcJ,eAAgBe,KAAKf,iBAGxEe,KAAKQ,MAAMU,aAAgB,IAAiC,MAA3BlB,KAAKQ,MAAMnB,aAAyB/C,EAAAC,EAAAC,cAAC2F,EAAD,CAAYpD,MAAO6C,EAAa9C,SAAUkB,KAAKlB,SAAUF,YAAaoB,KAAKQ,MAAM5B,cAAmB,WAzDvJwD,IAAMC,WCMLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtG,EAAAC,EAAAC,cAACqG,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,KAAK,SAAAyC,GACjCA,EAAaC","file":"static/js/main.bc765f71.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nconst Nav=()=>{\r\n    return(\r\n        <nav>\r\n            <div className=\"nav-wrapper container\">\r\n               <a href=\"#\" className=\"brand-logo\">Movie finder</a>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\nexport default Nav","import React from 'react'\r\n\r\n\r\nconst Search= (props)=>{\r\n    return(\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <section className=\"col s4 offset-s4\">\r\n                    <form action=\"\" onSubmit={props.handleSubmit}>\r\n                        <div className=\"input-field\">\r\n                            <input placeholder=\"Search Movie\" type=\"text\" onChange={props.handleChange}/>\r\n                        </div>\r\n                    </form>\r\n                </section>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search ","import React from 'react'\r\n\r\nconst Movie =(props)=>{\r\n  return(\r\n      <div className='col s12 m6 l3'>\r\n          <div className=\"card\">\r\n              <div className=\"card-image waves-effect waves-block waves-light\">\r\n              { props.image == null ? <img className=\"\" src={`https://s3-ap-southeast-1.amazonaws.com/upcode/static/default-image.jpg`} alt=\"Card image cap\" style={{ width: \"100%\",\r\n                        height: 360}}/> : <img className=\"\" src={`http://image.tmdb.org/t/p/w185${props.image}`} alt=\"Card image cap\" style={{ width: \"100%\",\r\n                        height: 360}} />}\r\n\r\n              </div>\r\n              <div className=\"card-content\">\r\n                <p><a href=\"#\" onClick={()=>props.viewMovieInfo(props.movieId)}>View details </a></p>\r\n            </div>\r\n          </div>\r\n      </div>\r\n  )\r\n}\r\nexport default Movie","import React from 'react'\r\nimport Movie from './Movie'\r\n\r\n\r\nconst MovieList=(props)=>{\r\n    return(\r\n        <div className=\"container\">\r\n        <div className=\"row\">\r\n            <div className=\"col s12\">\r\n                {\r\n                    props.movies.map((movie,i)=>{\r\n                        return(\r\n                            <Movie key={i} viewMovieInfo={props.viewMovieInfo} movieId={movie.id} image={movie.poster_path}/>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n            \r\n        </div>\r\n    </div>\r\n    )\r\n    \r\n}\r\nexport default MovieList","import React from 'react'\r\n\r\nconst Pagination =(props)=>{\r\n        const pageLinks=[]\r\n        for(let i = 1; i<=props.pages +1; i++  ){\r\n            let active=props.currentPage == i ? 'active' : ' ';\r\n            pageLinks.push(<li className={`waves-effect ${active}`} key={i} onClick={()=>props.nextPage(i)}><a href='#'>{i}</a></li>)\r\n        }\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <ul className=\"pagination\">\r\n                        {props.currentPage > 1 ? <li className={`waves-effect`}  onClick={()=>props.nextPage(props.currentPage -1)}><a href='#'>Prev</a></li> : ''}\r\n                        {pageLinks}\r\n                        {props.currentPage < props.pages + 1  ? <li className={`waves-effect`}  onClick={()=>props.nextPage(props.currentPage + 1)}><a href='#'>Next</a></li> : ''}\r\n                    </ul>\r\n                    \r\n                </div>\r\n            </div>\r\n        )\r\n}\r\n\r\n\r\n\r\nexport default Pagination","import React from 'react'\r\n\r\nconst MovieInfo =(props)=>{\r\nreturn(\r\n    <div className='container'>\r\n        <div className='row' onClick={props.closeMovieInfo} style={{cursor:\"pointer\", paddingTop:50}}>\r\n    <i className='fas fa-arrow-left'></i>\r\n    <span style={{marginLeft:10}}>Go back</span>\r\n        </div>\r\n        <div className=\"row\">\r\n            <div className=\"col s12 m4\">\r\n            {props.currentMovie.poster_path == null ? <img src={`https://s3-ap-southeast-1.amazonaws.com/upcode/static/default-image.jpg`} alt=\"card image\" style={{ width: \"100%\",\r\n                            height: 360}}/> : <img src={`http://image.tmdb.org/t/p/w185${props.currentMovie.poster_path}`} alt=\"card image\" style={{ width: \"100%\",\r\n                            height: 360}}/>  }\r\n\r\n            </div>\r\n            <div className='col s12 m8'>\r\n    <div className=\"info-container\">\r\n<p>{props.currentMovie.title}</p>\r\n<p>{props.currentMovie.release_date.substring(6).split(\"-\").concat(props.currentMovie.release_date.substring(0, 4)).join(\"/\")}</p>\r\n<p>{props.currentMovie.overview}</p>\r\n    </div>\r\n        </div>\r\n\r\n</div>\r\n    </div>\r\n\r\n)\r\n}\r\nexport default MovieInfo","import React from 'react'\r\nimport Nav from './Nav'\r\nimport Search from './Search'\r\nimport MovieList from './MovieList'\r\nimport Pagination from './Pagination'\r\nimport MovieInfo from './MovieInfo'\r\nclass App  extends React.Component{\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            movies:[],\r\n            searchTerm:'',\r\n            totalResults:0,\r\n            currentPage:1,\r\n            currentMovie:null,\r\n\r\n        }\r\n        this.apiKey=process.env.REACT_APP_API\r\n    }\r\n\r\n    handleSubmit=(e)=>{\r\n        e.preventDefault()\r\n        fetch(`https://api.themoviedb.org/3/search/movie?api_key=${this.apiKey}&query=${this.state.searchTerm}`)\r\n        .then(data=>data.json())\r\n        .then(data=>{\r\n            console.log(data)\r\n            this.setState({movies:[...data.results], totalResults:data.total_results})\r\n        })\r\n    }\r\n    handleChange=(e)=>{\r\n        this.setState({searchTerm:e.target.value})\r\n    }\r\n    nextPage=(pageNumber)=>{\r\n        fetch(`https://api.themoviedb.org/3/search/movie?api_key=${this.apiKey}&query=${this.state.searchTerm}&page=${pageNumber}`)\r\n        .then(data=>data.json())\r\n        .then(data=>{\r\n            console.log(data)\r\n            this.setState({movies:[...data.results], currentPage:pageNumber})\r\n        })\r\n    }\r\n    viewMovieInfo=(id)=>{\r\n        const filteredMovie =this.state.movies.filter(movie=>movie.id == id)\r\n\r\n        const newCurrentMovie = filteredMovie.length > 0 ? filteredMovie[0] : null;\r\n        this.setState({currentMovie : newCurrentMovie})\r\n    }\r\n\r\n    closeMovieInfo=()=>{\r\n        this.setState({currentMovie:null})\r\n    }\r\n\r\n\r\n    render(){\r\n        const numberPages=Math.floor(this.state.totalResults / 20);\r\n        return(\r\n            <div className=\"App\">\r\n\r\n<Nav/>\r\n\r\n{this.state.currentMovie == null ? <div><Search handleSubmit={this.handleSubmit} handleChange={this.handleChange}/><MovieList viewMovieInfo={this.viewMovieInfo} movies={this.state.movies}/></div>\r\n: <MovieInfo currentMovie={this.state.currentMovie} closeMovieInfo={this.closeMovieInfo}/>}\r\n\r\n\r\n{this.state.totalResults  > 20 && this.state.currentMovie == null   ? <Pagination pages={numberPages} nextPage={this.nextPage} currentPage={this.state.currentPage}  /> : ''}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}